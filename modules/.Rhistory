df <- gapminder %>%  group_by(continent, year) %>%  mutate(gdpPercap_diff = gdpPercap-mean(gdpPercap)) %>%  arrange(desc(gdpPercap_diff))
head(df)
df <- gapminder %>%  group_by(continent, year) %>%  mutate(gdpPercap_diff = gdpPercap-mean(gdpPercap)) %>% ungroup() arrange(desc(gdpPercap_diff))
df <- gapminder %>%  group_by(continent, year) %>%  mutate(gdpPercap_diff = gdpPercap-mean(gdpPercap)) %>% ungroup(continent,year) %>%  arrange(desc(gdpPercap_diff))
head(df)
df <- gapminder %>%  group_by(continent, year) %>%  mutate(gdpPercap_diff = gdpPercap-mean(gdpPercap)) %>% ungroup() %>%  arrange(desc(gdpPercap_diff))
head(df)
df <- gapminder %>% select(country, year, gdpPercap_diff) %>% spread(year)
df <- gapminder %>%  group_by(continent, year) %>%  mutate(gdpPercap_diff = gdpPercap-mean(gdpPercap)) %>% ungroup() %>%  arrange(desc(gdpPercap_diff))
df1 <- df %>% select(country, year, gdpPercap_diff) %>% spread(year)
df1 <- df %>% select(country, year, gdpPercap_diff) %>% spread(year, gdpPercap_diff)
head(df1)
gap_medium <- gap_long_sep %>%
spread(obs_type, obs_values)
head(gap_medium)
df <- gapminder %>%  group_by(continent, year) %>%  mutate(gdpPercap_diff = gdpPercap-mean(gdpPercap)) %>%  arrange(desc(gdpPercap_diff))
df1 <- df %>% select(country, year, gdpPercap_diff) %>% spread(year, gdpPercap_diff)
head(df1)
gapminder <- read.csv(file.path("..", "data",
"gapminder-FiveYearData.csv"), stringsAsFactors = TRUE)
reg <- lm(formula = lifeExp ~ gdpPercap + pop + continent + year,
data = gapminder)
is.list(reg)
attributes(air)
reg$coefficients
plot(reg)
seq_len(NULL)
seq_len(1:5)
seq_len(5)
seq_len(0)
seq_len(19)
set.seed(1)
vals <- sample(1:nrow(air), 10)
vals
vals <- sample(1:nrow(air), 10)
vals
set.seed(1)
vals <- sample(1:nrow(air), 10)
vals
library(fields)
banana <- function(x) {   ## Rosenbrock Banana function
x1 <- x[1]
x2 <- x[2]
100 * (x2 - x1 * x1)^2 + (1 - x1)^2
}
x1s <- x2s <- seq(-5, 5, length = 100)
x <- expand.grid(x1s, x2s)
fx <- apply(x, 1, banana)
x
dim(x)
head(x)
par(mfrow = c(1, 2), mai = c(.45, .4, .1, .4))
image.plot(x1s, x2s, matrix(fx, 100), xlab = '', ylab = '')
image.plot(x1s, x2s, matrix(log(fx), 100), xlab = '', ylab = '')
optim(c(-2,0), banana)
banana <- function(x) {   ## Rosenbrock Banana function
points(x[1],x[2])
Sys.sleep(.03)
x1 <- x[1]
x2 <- x[2]
100 * (x2 - x1 * x1)^2 + (1 - x1)^2
}
par(mfrow = c(1, 1), mai = c(.45, .4, .1, .4))
image.plot(x1s, x2s, matrix(log(fx), 100), xlab = '', ylab = '')
optim(c(-2,0), banana)
date1 <- as.Date("03-01-2011", format = "%m-%d-%Y")
date2 <- as.Date("03/02/11", format = "%m/%d/%y")
date3 <- as.Date("07-May-11", format = "%d-%b-%y")
date1; date2
class(date1)
dates <- c(date1, date2, date3)
weekdays(dates)
dates + 30
date3 - date2
unclass(dates)
library(chron)
d1 <- chron("12/25/2004", "10:37:59")
# default format of m/d/Y and h:m:s
d2 <- chron("12/26/2004", "11:37:59")
class(d1)
d1
d1 + 33
d2 - d1
d1 + d2
mean(rpois(100,5))
qchisq(p = 0.95,ncp = 1, lower.tail = T)
qchisq(p = 0.95,df= 1, lower.tail = T)
pnorm(q = 5,lower.tail = F)
pt(q = 5,df = 1,lower.tail = F)
gap1 <- lm(gdpPercap~pop+lifeExp+year)
gap1 <- lm(gdpPercap~pop+lifeExp+year,data = gapminder)
gap2 <- lm(gdpPercap~pop+lifeExp+factor(year),data = gapminder)
summary(gap1)
summary(gap2)
randv <- rep(0,500)
for (i in seq_len(500)){
smp <- sample(seq_len(nrow(air)), replace = TRUE)
randv[i] <- mean(air$DepDelay[smp])
}
hist(randv)
summary(randv)
randv <- rep(0,500)
for (i in seq_len(500)){
smp <- sample(seq_len(nrow(air)), replace = TRUE)
randv[i] <- mean(air$DepDelay[smp], na.rm = TRUE)
}
hist(randv)
mod_multiple <- gam(DepDelayCens ~ s(Month, k = 8) +
s(SchedDepCont, k = 25) , data = airSmall)
library(mgcv)
mod_multiple <- gam(DepDelayCens ~ s(Month, k = 8) +
s(SchedDepCont, k = 25) , data = airSmall)
thresh <- function(x, val, upper = TRUE) {
if(upper) {
x[x > val] <- val
} else {
x[x < val] <- val
}
return(x)
}
DestSubset <- c('LAX','SEA','PHX','DEN','MSP','JFK','ATL','DFW',
'IAH', 'ORD')
airSmall <- subset(air, Dest %in% DestSubset)
# reduce outlier influence
airSmall$DepDelayCens <- thresh(airSmall$DepDelay, 180)
airSmall$SchedDepCont <- airSmall$CRSDepTime %/% 100 +
(airSmall$CRSDepTime %% 100) / 60
mod_LAX <- gam(DepDelayCens ~ s(Month, k = 8) + s(SchedDepCont, k = 25),
data = airSmall, subset = airSmall$Dest == "LAX")
mod_ORD <- gam(DepDelayCens ~ s(Month, k = 8) + s(SchedDepCont, k = 25),
data = airSmall, subset = airSmall$Dest == "ORD")
summary(mod_LAX)
summary(mod_ORD)
par(mfrow = c(2,2))
plot(mod_LAX)
plot(mod_ORD)
View(airSmall)
mod_multiple <- gam(DepDelayCens ~ s(Month, k = 8) +
s(SchedDepCont, k = 25) , data = airSmall)
summary(mod_multiple)
par(mfrow = c(1,2))
plot(mod_multiple)
mod_multiple <- gam(DepDelayCens ~ s(Month, k = 8) +
s(SchedDepCont, k = 230) , data = airSmall)
summary(mod_multiple)
par(mfrow = c(1,2))
plot(mod_multiple)
gap_log <- df %>% mutate(wealth = factor(gdpPercap_diff>0))
gapfit <- glm(wealth~country+lifeExp+pop,data = gap_log, family = "Binomial"("logit"))
gapfit <- glm(wealth~country+lifeExp+pop,data = gap_log, family = binomial("logit"))
summary(gapfit)
nrow(air)
nrow(air)/10
i=1
(i-1)*floor(nrow(air)/10)+seq_len(floor(nrow(air)/10))
smp = sample(seq_len(nrow(air)))
air$fold = 0
for(i in 1:10){
smp_fold <- (i-1)*floor(nrow(air)/10)+seq_len(floor(nrow(air)/10))
air[smp_fold,]$fold = i
}
air[air$fold==0,]$fold = 10
summary(gapfit)
set.seed(1)
smp = sample(seq_len(nrow(air)))
air$fold = 0
for(i in 1:10){
smp_fold <- (i-1)*floor(nrow(air)/10)+seq_len(floor(nrow(air)/10))
air[smp[smp_fold],]$fold = i
}
air[air$fold==0,]$fold = 10
install.packages("patchwork")
sessionInfo()
# Install and initialize patchwork library
#devtools::install_github("thomasp85/patchwork")
library(patchwork)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lattice)
library(gridExtra)
library(reshape2)
if(!('modules' %in% unlist(strsplit(getwd(), split = '/')))) setwd('modules')
medals <- read.csv(file.path('..', 'data', 'all_medalists.csv'),
stringsAsFactors = FALSE)
head(medals)
# dplyr and tidyr refresher
medal_counts <- medals %>%
group_by(Medal, Year, NOC) %>%
summarise(count = n())
head(medal_counts)
medal_counts_wide <- medal_counts %>% spread(key = Medal, value = count) %>%
ungroup() %>%
mutate(Bronze = ifelse(is.na(Bronze), 0, Bronze)) %>%
mutate(Silver = ifelse(is.na(Silver), 0, Silver)) %>%
mutate(Gold = ifelse(is.na(Gold), 0, Gold))
head(medal_counts_wide)
usa_gold_medals <-  medal_counts %>%
dplyr::filter(Medal == "Gold") %>%
dplyr::filter(NOC == "USA")
plot(x = , y = , ...)
plot(medal_counts_wide$Year, medal_counts_wide$Gold) # Basic
par(mfrow=c(1,1))
plot(medal_counts_wide$Year, medal_counts_wide$Gold) # Basic
plot(usa_gold_medals$Year, usa_gold_medals$count, type = "l",
main = "USA Gold Medals",
xlab = "Year", ylab = "Count") # with updated parameters
points(x = 1984, y = usa_gold_medals$count[usa_gold_medals$Year == 1984],
col = "red", pch = 16)
boxplot(Gold~Year, data = medal_counts_wide)
hist(medal_counts_wide$Gold)
plot(density(medal_counts_wide$Gold))
barplot(usa_gold_medals$count, width = 4, names.arg = usa_gold_medals$Year,
main = "USA Gold Medals")
mosaicplot(Year~Medal, medal_counts)
dev.off()
boxplot(Gold~Year, data = medal_counts_wide)
hist(medal_counts_wide$Gold)
par(mfrow=c(1,1))
plot(medal_counts_wide$Year, medal_counts_wide$Gold) # Basic
dev.on()
dev.off()
dev.off()
par(mfrow=c(1,1))
plot(medal_counts_wide$Year, medal_counts_wide$Gold) # Basic
plot(usa_gold_medals$Year, usa_gold_medals$count, type = "l",
main = "USA Gold Medals",
xlab = "Year", ylab = "Count") # with updated parameters
points(x = 1984, y = usa_gold_medals$count[usa_gold_medals$Year == 1984],
col = "red", pch = 16)
# include any code here you don't want to show up in the document,
# e.g. package and dataset loading
library(dplyr)
library(tidyr)
library(ggplot2)
library(lattice)
library(gridExtra)
library(reshape2)
if(!('modules' %in% unlist(strsplit(getwd(), split = '/')))) setwd('modules')
medals <- read.csv(file.path('..', 'data', 'all_medalists.csv'),
stringsAsFactors = FALSE)
head(medals)
# dplyr and tidyr refresher
medal_counts <- medals %>%
group_by(Medal, Year, NOC) %>%
summarise(count = n())
head(medal_counts)
medal_counts_wide <- medal_counts %>% spread(key = Medal, value = count) %>%
ungroup() %>%
mutate(Bronze = ifelse(is.na(Bronze), 0, Bronze)) %>%
mutate(Silver = ifelse(is.na(Silver), 0, Silver)) %>%
mutate(Gold = ifelse(is.na(Gold), 0, Gold))
head(medal_counts_wide)
usa_gold_medals <-  medal_counts %>%
dplyr::filter(Medal == "Gold") %>%
dplyr::filter(NOC == "USA")
plot(medal_counts_wide$Year, medal_counts_wide$Gold) # Basic
plot(usa_gold_medals$Year, usa_gold_medals$count, type = "l",
main = "USA Gold Medals",
xlab = "Year", ylab = "Count") # with updated parameters
boxplot(Gold~Year, data = medal_counts_wide)
hist(medal_counts_wide$Gold)
plot(density(medal_counts_wide$Gold))
barplot(usa_gold_medals$count, width = 4, names.arg = usa_gold_medals$Year,
main = "USA Gold Medals")
mosaicplot(Year~Medal, medal_counts)
medal_lm <- lm(Gold ~ Bronze + Silver, data = medal_counts_wide)
# Calls plotting method for class of the dataset ("data.frame")
plot(medal_counts_wide %>% select(-NOC))
# Calls plotting method for class of medal_lm object ("lm"), print first two plots only
plot(medal_lm, which=1:2)
xyplot(Gold~Year, data = medal_counts_wide, main = "Gold Medal Counts")
xyplot(count~Year, data = usa_gold_medals, type = "l", main = "USA Gold Medals")
# Boxplot
bwplot(Year~Gold, data = medal_counts_wide, main = "Gold Medal Counts")
# Boxplot
bwplot(Year~Gold, data = medal_counts_wide, main = "Gold Medal Counts")
# Flip the coordinates so year increases on the x-axis
# Explicitly turn Year into a factor
bwplot(Gold~factor(Year), data = medal_counts_wide, main = "Gold Medal Counts",
horizontal = FALSE)
# Histogram
histogram(~Gold, medal_counts_wide, type="count", main = "Gold Medal Counts")
# Density plot
densityplot(~Gold, medal_counts_wide, main = "Gold Medal Counts")
# Bar chart
barchart(count~factor(Year), data = usa_gold_medals, width = 4,
main = "USA Gold Medals", horizontal = FALSE)
# NOT run
ggplot(data = , aes(x = ,y = , [options])) + geom_xxxx() + ... + ... + ...
p <- ggplot(data = medal_counts_wide, aes(x = Year, y = Gold)) +
geom_point(color = "gold")
p
p <- ggplot(data = medal_counts_wide, aes(x = Year, y = Gold)) +
geom_point(color = "gold")
p
p + geom_point(aes(x = Year, y = Silver), color = "gray") + ylab("Medals")
p
p + geom_point(aes(x = Year, y = Silver), color = "gray") + ylab("Medals")
p
p + geom_point(aes(x = Year, y = Silver), color = "gray") + ylab("Medals")
ggplot(data = medal_counts_wide, aes(x = Year, y = Gold))
geom_point(color = "gold")
ggplot(medal_counts_wide, aes(x = Year, y = Gold)) + geom_point() +
ggtitle("Gold Medal Counts")
ggplot(usa_gold_medals, aes(x = Year, y = count)) + geom_line() +
ggtitle("USA Gold Medals")
# Boxplots
ggplot(medal_counts_wide, aes(x = factor(Year), y = Gold)) +
geom_boxplot() + ggtitle("Gold Medal Counts")
# Histogram
ggplot(medal_counts_wide, aes(x = Gold)) + geom_histogram() +
ggtitle("Gold Medal Counts")
# Density plot
ggplot(medal_counts_wide, aes(x = Gold)) + geom_density() +
ggtitle("Gold Medal Counts")
# Bar chart
ggplot(usa_gold_medals, aes(x = Year, y = count)) + geom_bar(stat = "identity")
names(usa_gold_medals)
# This combines the subsetting and plotting into one step
medal_counts %>%
dplyr::filter(Medal == "Gold") %>%
dplyr::filter(NOC == "USA") %>%
ggplot(aes(x = Year, y = count)) + geom_line()
# This combines the subsetting and plotting into one step
medal_counts %>%
dplyr::filter(Medal == "Gold") %>%
dplyr::filter(NOC == "USA") %>%
ggplot(aes(x = Year, y = count)) #+ geom_line()
# This combines the subsetting and plotting into one step
medal_counts %>%
dplyr::filter(Medal == "Gold") %>%
dplyr::filter(NOC == "USA") %>%
ggplot(aes(x = Year, y = count)) + geom_line()
usa_all_medals <- medal_counts %>%
dplyr::filter(NOC == "USA")
# ggplot2 call
ggplot(data = usa_all_medals, aes(x = Year, y = count)) +
geom_line(aes(color = Medal))
usa_all_medals_untidy <- medal_counts_wide %>%
dplyr::filter(NOC == "USA")
# Base graphics call
plot(usa_all_medals_untidy$Year, usa_all_medals_untidy$Gold, col = "green",
type = "l")
lines(usa_all_medals_untidy$Year, usa_all_medals_untidy$Silver, col = "blue")
lines(usa_all_medals_untidy$Year, usa_all_medals_untidy$Bronze, col = "red")
legend("right", legend = c("Gold", "Silver", "Bronze"),
fill = c("green", "blue", "red"))
# ggplot2 call
ggplot(data = usa_all_medals, aes(x = Year, y = count)) +
geom_line(aes(color = Medal))
ggplot(data = usa_gold_medals, aes(x = count)) + geom_density() # ggplot2
densityplot(~count, data = usa_gold_medals) # lattice
ggplot(data = usa_gold_medals, aes(x = Year, y = count)) + geom_point() # ggplot2
xyplot(count~Year, data = usa_gold_medals) # lattice
ggplot(data = usa_gold_medals, aes(x = Year, y = count)) + geom_line() # ggplot2
xyplot(count~Year, data = usa_gold_medals, type = "l") # lattice
# Create a dataframe of median number of gold medals by country
# note that the conversion to 'double' is because the median
# calculation had an error with 'count' is stored as integer
median_gold_medals <- medal_counts %>%
dplyr::filter(Medal == "Gold") %>%
mutate(count = as.double(count)) %>%
group_by(NOC) %>%
summarise(med = median(count))
ggplot(data = median_gold_medals[1:15, ], aes(x = NOC, y = med)) +
geom_bar(stat="identity") # ggplot2
barchart(med~NOC, data = median_gold_medals[1:15, ]) # lattice
# Notice that here, you must explicitly convert numeric years to factors
ggplot(data = medal_counts_wide, aes(x = factor(Year), y = Gold)) +
geom_boxplot() # ggplot2
bwplot(Gold~factor(Year), data = medal_counts_wide, horizontal = FALSE) # lattice
# Subset the data to North America countries for easier viewing
northern_hem <- medal_counts_wide %>%
dplyr::filter(NOC %in% c("USA",
"CAN", # Canada
"CUB", # Cuba
"MEX")) # Mexico
ggplot(data = northern_hem, aes(x = Year, y = Gold)) + geom_point() +
facet_wrap(~NOC) # ggplot2
xyplot(Gold~Year|NOC, data = northern_hem) # lattice
data(volcano) # Load volcano contour data
volcano[1:10, 1:10] # Examine volcano dataset (first 10 rows and columns)
volcano3d <- melt(volcano) # Use reshape2 package to melt the data into tidy form
head(volcano3d) # Examine volcano3d dataset (head)
names(volcano3d) <- c("xvar", "yvar", "zvar") # Rename volcano3d columns
ggplot(data = volcano3d, aes(x = xvar, y = yvar, z = zvar)) +
geom_contour() # ggplot2
contourplot(zvar~xvar + yvar, data = volcano3d) # lattice
ggplot(data = volcano3d, aes(x = xvar, y = yvar, z = zvar)) +
geom_contour() # ggplot2
contourplot(zvar~xvar + yvar, data = volcano3d) # lattice
ggplot(data = volcano3d, aes(x = xvar, y = yvar, z = zvar)) +
geom_tile(aes(fill = zvar)) # ggplot2
levelplot(zvar~xvar + yvar, data = volcano3d) # lattice
ggplot(data = volcano3d, aes(x = xvar, y = yvar, z = zvar)) +
geom_tile(aes(fill = zvar)) # ggplot2
levelplot(zvar~xvar + yvar, data = volcano3d) # lattice
# Create a subset of the dataset containing only data for France
cloud(Gold~Bronze*Silver, data = northern_hem)
cloud(Gold~Bronze*Silver|NOC, data = northern_hem)
ggplot(data = usa_gold_medals, aes(x = Year, y = count)) + geom_point() +
xlab(label = "Year") +
ylab(label = "Number of Gold Medals Won") +
ggtitle(label = "Cool Graph") # ggplot2
xyplot(count~Year, data = usa_gold_medals,
xlab = "Year", ylab = "Number of Gold Medals Won",
main = "Cool Graph") # lattice
ggplot(data = usa_gold_medals, aes(x = Year, y = count)) +
geom_point() # ggplot2
ggplot(data = usa_gold_medals, aes(x = Year, y = count)) +
geom_point(size=3) # ggplot2
ggplot(data = usa_gold_medals, aes(x = Year, y = count)) +
geom_point(size=1) # ggplot2
xyplot(count~Year, data = usa_gold_medals) # lattice
xyplot(count~Year, data = usa_gold_medals, cex = 2) # lattice
xyplot(count~Year, data = usa_gold_medals, cex = .5) # lattice
ggplot(data = usa_gold_medals, aes(x = Year, y = count)) +
geom_point(color = colors()[11]) # ggplot2
ggplot(data = usa_gold_medals, aes(x = Year, y = count)) +
geom_point(color = "red") # ggplot2
xyplot(count~Year, data = usa_gold_medals, col = colors()[11]) #lattice
xyplot(count~Year, data = usa_gold_medals, col = "red") #lattice
# NOT run
ggplot(data = , aes(x = , y = , color = , linetype = , shape = , size=))
ggplot(data = usa_all_medals, aes(x = Year, y = count)) +
geom_line(aes(color = Medal))
ggplot(data = usa_all_medals, aes(x = Year, y = count)) +
geom_point(color = Medal)
ggplot(data = usa_all_medals, aes(x = Year, y = count)) +
geom_point(color = "Medal")
names(usa_all_medals)
ggplot(data = usa_all_medals, aes(x = Year, y = count)) +
geom_point(color = Medal)
ggplot(data = usa_all_medals, aes(x = Year, y = count)) +
geom_line(aes(color = Medal))
ggplot(data = usa_gold_medals, aes(x = Year, y = count)) +
geom_point(shape = 3) # ggplot2
ggplot(data = usa_gold_medals, aes(x = Year, y = count)) +
geom_point(shape = "w") # ggplot2
ggplot(data = usa_gold_medals, aes(x = Year, y = count)) +
geom_point(shape = "$", size=5) # ggplot2
xyplot(count~Year, data = usa_gold_medals, pch = 3) # lattice
xyplot(count~Year, data = usa_gold_medals, pch = "w") # lattice
xyplot(count~Year, data = usa_gold_medals, pch = "$", cex = 2) # lattice
ggplot(data = usa_gold_medals, aes(x = Year, y = count)) +
geom_line(linetype = 1) # ggplot2
ggplot(data = usa_gold_medals, aes(x = Year, y = count)) +
geom_line(linetype = 2) # ggplot2
ggplot(data = usa_gold_medals, aes(x = Year, y = count)) +
geom_line(linetype = 5, size = 2) # ggplot2
xyplot(count~Year, data = usa_gold_medals, type = "l",
lty = 3, lwd = 3) # lattice
ggplot(data = northern_hem, aes(x = Year, y = Gold)) +
geom_line(aes(linetype = NOC))
ggplot(data = northern_hem, aes(x = Year, y = Gold)) +
geom_point(aes(shape = NOC, color = NOC))
ggplot(data = northern_hem, aes(x = Year, y = Silver)) +
geom_point(aes(color = Gold))
ggplot(data = northern_hem, aes(x = Year, y = Silver)) +
geom_point(aes(size = Gold))
ggplot(data = northern_hem, aes(x = Year, y = Silver)) +
geom_point(aes(size = Gold, color = NOC))
ggplot(data = usa_gold_medals, aes(x = Year, y = count)) + geom_point()
# Add linear model (lm) smoother
ggplot(data = usa_gold_medals, aes(x = Year, y = count)) + geom_point() +
geom_smooth(method = "lm")
# Add local linear model (loess) smoother, span of 0.75 (more smoothed)
ggplot(data = usa_gold_medals, aes(x = Year, y = count)) + geom_point() +
geom_smooth(method = "loess", span = .75)
# Add local linear model (loess) smoother, span of 0.25 (less smoothed)
ggplot(data = usa_gold_medals, aes(x = Year, y = count)) + geom_point() +
geom_smooth(method = "loess", span = .25)
# Add linear model (lm) smoother, no standard error shading
ggplot(data = usa_gold_medals, aes(x = Year, y = count)) + geom_point() +
geom_smooth(method = "lm", se = FALSE)
# Add local linear model (loess) smoother, no standard error shading
ggplot(data = usa_gold_medals, aes(x = Year, y = count)) + geom_point() +
geom_smooth(method = "loess", se = FALSE)
# Add a local linear (loess) smoother for each medal, no standard error shading
ggplot(data = usa_all_medals, aes(x = Year, y = count)) +
geom_point(aes(color = Medal)) +
geom_smooth(aes(color = Medal), method = "loess", se = FALSE)
# Create 3 plots to combine in a table
plot1 <- ggplot(data = medal_counts_wide, aes(x = Year, y = Gold)) +
geom_point(color = "gold") +
geom_point(aes(x = Year, y = Silver), color = "gray") +
geom_point(aes(x = Year, y = Bronze), color = "brown") +
ylab("Medals")
plot2 <- ggplot(data = usa_all_medals, aes(x = Year, y = count)) +
geom_line(aes(color = Medal))
plot3 <- ggplot(data = northern_hem, aes(x = Year, y = Gold)) +
geom_line(aes(linetype = NOC))
# Call grid.arrange
grid.arrange(plot1, plot2, plot3, nrow=3, ncol = 1)
# Install and initialize patchwork library
#devtools::install_github("thomasp85/patchwork")
library(patchwork)
sessionInfo()
# Install and initialize patchwork library
#devtools::install_github("thomasp85/patchwork")
library(patchwork)
sessionInfo()
sessionInfo()
library(dplyr)
library(tidyr)
library(ggplot2)
library(lattice)
library(gridExtra)
library(reshape2)
sessionInfo()
install.packages("patchwork")
